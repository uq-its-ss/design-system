@use "sass:map";
@use "sass:string";
@use "sass:meta";

@use "@uqds/core/src/scss/global" as core;
@use "_build/icons" as *;

$colour-placeholder: "~~COLOR~~";

$icon-primary-filter: core.$filter-primary;
$icon-light-filter: core.$filter-white;
$icon-text-filter: core.$filter-text;

@mixin icon-base() {
  .uq-icon {
    &::before {
      content: "";
      display: inline-block;
      margin-right: 0.3em;
      height: 1.5em;
      width: 1.5em;
      filter: $icon-primary-filter;
      background-repeat: no-repeat;
      background-position: center;
      background-size: 100%;
      vertical-align: text-bottom;
    }

    // Colour variants
    &--light {
      &::before {
        filter: $icon-light-filter;
      }
    }

    &--text {
      &::before {
        filter: $icon-text-filter;
      }
    }
  }
}

@mixin icon($name) {
  .uq-icon--#{$name} {
    &::before {
      background-image: url(get-icon("#{$name}"));
    }
  }
}

@function -str-replace($string, $search, $replace: "") {
  $index: string.index($string, $search);

  @if $index {
    @return string.slice($string, 1, $index - 1) + $replace +
      -str-replace(
        string.slice($string, $index + string.length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

@function get-icon($icon, $color: #000) {
  @if meta.type-of($color) != "color" and $color != "none" {
    @warn 'The requested color - "' + $color + '" - was not recognized as a SASS color value.';
    @return null;
  }

  @if map.has-key($icons, $icon) {
    $icon: map.get($icons, $icon);
    // Since we're inserting the colour into a data URI (which is made up
    // of URL-escaped SVG), we need to make sure the incoming value is
    // already escaped.
    $escaped-color: -str-replace("" + $color, "#", "%23");
    $data-uri: -str-replace($icon, $colour-placeholder, $escaped-color);

    @return $data-uri;
  }

  @warn 'The requested icon - "' + $icon + '" - is not defined in the $icons map.';
  @return null;
}
